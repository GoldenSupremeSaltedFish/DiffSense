name: DiffSense CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    name: Build DiffSense
    runs-on: ubuntu-latest
    
    # 添加权限配置
    permissions:
      contents: write
      packages: write
      
    env:
      PLUGIN_DIR: ${{ github.workspace }}/plugin
      UI_DIR: ${{ github.workspace }}/ui
      FRONTEND_DIST: ${{ github.workspace }}/ui/diffsense-frontend/dist
      FRONTEND_TARGET: ${{ github.workspace }}/plugin/ui/diffsense-frontend
      VITE_OUT_DIR: dist
      
    steps:
      - uses: actions/checkout@v3
      
      # 设置Java环境
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
          cache: maven
          
      # 构建Java分析器
      - name: Build Java Analyzer
        run: mvn clean package -DskipTests
      
      # 设置Node环境
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            ui/diffsense-frontend/package-lock.json
            plugin/package-lock.json

      # 安装前端依赖并构建
      - name: Build Frontend
        working-directory: ui/diffsense-frontend
        run: |
          echo "Building frontend in $(pwd)"
          echo "Frontend dist directory: $FRONTEND_DIST"
          echo "Frontend target directory: $FRONTEND_TARGET"
          echo "Vite output directory: $VITE_OUT_DIR"
          
          # 检查和创建目录
          mkdir -p dist
          chmod -R 755 .
          
          echo "Directory contents and permissions before build:"
          ls -la
          
          # 安装依赖和构建
          npm install
          npm run build
          
          echo "Directory contents and permissions after build:"
          ls -la
          ls -la dist/ || echo "dist/ directory not found"
          
          # 如果dist目录存在，显示其内容和权限
          if [ -d "dist" ]; then
            echo "dist directory exists, contents and permissions:"
            ls -la dist/
            
            # 确保dist目录有正确的权限
            chmod -R 755 dist/
          else
            echo "dist directory was not created!"
            exit 1
          fi
          
      # 安装插件依赖并构建
      - name: Build VSCode Extension
        working-directory: plugin
        run: |
          echo "Building plugin in $(pwd)"
          echo "Directory contents and permissions before build:"
          ls -la
          
          # 创建必要的目录
          mkdir -p ui/diffsense-frontend
          chmod -R 755 .
          
          npm install
          npm run build
          
          echo "Directory contents and permissions after build:"
          ls -la
          echo "UI directory contents and permissions:"
          ls -la ui/diffsense-frontend/ || echo "UI directory not found"
          
      # 使用与本地一致的 prepare-release 流程
      - name: Prepare Release Folder
        working-directory: plugin
        run: npm run prepare-release

      # 在 release 目录打包 VSIX
      - name: Package VSIX from Release
        working-directory: plugin/release
        run: |
          echo "Packaging VSIX in $(pwd)"
          npx vsce package --no-yarn

      # 获取版本号
      - name: Get Version
        id: get_version
        shell: bash
        run: |
          VERSION=$(node -p "require('${PLUGIN_DIR}/package.json').version")
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "Building version: ${VERSION}"
          
            # 构建完成，准备同步产物到子仓库
      - name: Build Complete
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo "✅ 构建完成，版本: ${{ env.VERSION }}"
          echo "📦 产物位置: ${{ env.PLUGIN_DIR }}/release/"
          echo "🔄 准备同步到子仓库..."
          
      # 上传构建产物（用于调试和验证）
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4.6.2
        with:
          name: DiffSense-${{ env.VERSION }}-Full
          path: |
            ${{ env.PLUGIN_DIR }}/release/analyzers/
            ${{ env.PLUGIN_DIR }}/release/ui/
            ${{ env.PLUGIN_DIR }}/release/*.vsix
          retention-days: 14

      # 同步产物到子仓库
      - name: Sync Artifacts to Sub Repository
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        working-directory: plugin
        env:
          ARTIFACTS_TOKEN: ${{ secrets.ARTIFACTS_TOKEN }}
        run: |
          echo "🔄 开始同步产物到子仓库..."
          
          # 准备产物目录
          mkdir -p artifacts-staging
          
          echo "📦 准备构建产物..."
          
          # 复制编译后的TypeScript代码
          if [ -d "dist" ]; then
            cp -r dist artifacts-staging/
            echo "✅ TypeScript 编译代码已复制"
          fi
          
          # 复制分析器产物
          if [ -d "analyzers" ]; then
            cp -r analyzers artifacts-staging/
            echo "✅ 分析器产物已复制"
          fi
          
          # 复制UI产物
          if [ -d "ui" ]; then
            cp -r ui artifacts-staging/
            echo "✅ UI产物已复制"
          fi
          
          # 复制VSIX文件
          if [ -d "release" ]; then
            cp release/*.vsix artifacts-staging/ 2>/dev/null || echo "⚠️ 未找到VSIX文件"
            echo "✅ VSIX文件已复制"
          fi
          
          # 复制必要的配置文件
          cp package.json artifacts-staging/
          cp tsconfig.json artifacts-staging/
          cp icon.png artifacts-staging/
          cp LICENSE.txt artifacts-staging/
          cp README.md artifacts-staging/
          cp .vscodeignore artifacts-staging/
          
          echo "✅ 配置文件已复制"
          
          # 创建运行时配置文件
          cat > artifacts-staging/runtime-config.json << EOF
          {
            "version": "$(node -p "require('./package.json').version")",
            "buildTime": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "commit": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "isProduction": true,
            "debugMode": false,
            "artifactsOnly": true,
            "buildInfo": {
              "javaAnalyzer": "$(ls analyzers/*.jar 2>/dev/null | wc -l) JAR files",
              "nodeAnalyzer": "$(ls analyzers/node-analyzer/*.js 2>/dev/null | wc -l) JS files",
              "golangAnalyzer": "$(ls analyzers/golang-analyzer/*.js 2>/dev/null | wc -l) JS files",
              "frontend": "$(ls ui/index.html 2>/dev/null | wc -l) files",
              "vsix": "$(ls release/*.vsix 2>/dev/null | wc -l) files"
            }
          }
          EOF
          
          echo "✅ 运行时配置已创建"
          
          # 显示产物统计
          echo "📊 产物统计:"
          find artifacts-staging -type f -name "*.jar" | wc -l | xargs echo "JAR文件:"
          find artifacts-staging -type f -name "*.js" | wc -l | xargs echo "JS文件:"
          find artifacts-staging -type f -name "*.html" | wc -l | xargs echo "HTML文件:"
          find artifacts-staging -type f -name "*.vsix" | wc -l | xargs echo "VSIX文件:"
          
          # 推送到 artifacts 仓库
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          if [ -z "$ARTIFACTS_TOKEN" ]; then
            echo "❌ 错误: ARTIFACTS_TOKEN 未设置"
            exit 1
          fi
          
          echo "🔄 克隆产物仓库..."
          git clone https://x-access-token:${ARTIFACTS_TOKEN}@github.com/GoldenSupremeSaltedFish/Diffsense-artifacts.git artifacts-repo
          
          # 清空并复制新的构建产物
          cd artifacts-repo
          echo "🗑️ 清理现有产物..."
          rm -rf *
          
          echo "📦 复制新产物..."
          cp -r ../artifacts-staging/* .
          
          # 创建产物仓库的 README
          cat > README.md << 'EOF'
          # DiffSense Plugin Artifacts
          
          这个仓库包含 **DiffSense VSCode 插件的构建产物**，用于分发和调试。
          
          ## 🚀 快速开始
          
          ### 安装插件
          ```bash
          # 下载最新的 VSIX 文件
          wget https://github.com/GoldenSupremeSaltedFish/Diffsense-artifacts/raw/main/diffsense-*.vsix
          
          # 安装到 VSCode
          code --install-extension diffsense-*.vsix
          ```
          
          ### 调试产物
          ```bash
          git clone https://github.com/GoldenSupremeSaltedFish/Diffsense-artifacts.git
          cd Diffsense-artifacts
          code .
          # 按 F5 开始调试预构建的产物
          ```
          
          ## 📁 产物结构
          
          ```
          ├── dist/                    # 编译后的 TypeScript 代码
          ├── ui/                     # 前端 UI 构建产物
          ├── analyzers/              # 语言分析器（包含依赖）
          │   ├── *.jar              # Java 分析器
          │   ├── node-analyzer/     # Node.js 分析器
          │   └── golang-analyzer/   # Golang 分析器
          ├── *.vsix                  # VSCode 插件包
          ├── runtime-config.json     # 构建元数据
          ├── package.json           # 插件元数据
          ├── tsconfig.json          # TypeScript 配置
          └── icon.png              # 插件图标
          ```
          
          ## 🔧 说明
          
          此产物仓库包含：
          - ✅ 编译后的代码（可直接运行）
          - ✅ 所有分析器的 JAR 包和 JS 文件
          - ✅ 前端构建产物
          - ✅ VSCode 插件包（VSIX）
          - ✅ 运行时配置文件
          
          产物结构与插件源码保持一致，包含所有运行时必需的文件。
          
          ## 📊 构建信息
          
          查看 `runtime-config.json` 获取详细的构建元数据。
          
          ## 🔄 自动更新
          
          此仓库由主仓库的 CI/CD 自动更新，每次主仓库推送都会同步最新的构建产物。
          
          ---
          
          🔗 **源代码**: [DiffSense](https://github.com/GoldenSupremeSaltedFish/DiffSense)
          EOF
          
          # 提交并推送
          git add .
          if git diff --staged --quiet; then
            echo "ℹ️ 无变更需要提交"
          else
            echo "📤 提交并推送产物..."
            git commit -m "🔄 同步产物 v$(node -p "require('../artifacts-staging/package.json').version") - $(date +'%Y-%m-%d %H:%M:%S')"
            git push origin main
            echo "✅ 产物同步成功！"
          fi
