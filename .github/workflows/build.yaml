name: DiffSense CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    name: Build DiffSense
    runs-on: ubuntu-latest
    
    # 添加权限配置
    permissions:
      contents: write
      packages: write
      
    env:
      PLUGIN_DIR: ${{ github.workspace }}/plugin
      UI_DIR: ${{ github.workspace }}/ui
      FRONTEND_DIST: ${{ github.workspace }}/ui/diffsense-frontend/dist
      FRONTEND_TARGET: ${{ github.workspace }}/plugin/ui/diffsense-frontend
      VITE_OUT_DIR: dist
      
    steps:
      - uses: actions/checkout@v3
      
      # 设置Java环境
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
          cache: maven
          
      # 构建Java分析器
      - name: Build Java Analyzer
        run: mvn clean package -DskipTests
      
      # 设置Node环境
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            ui/diffsense-frontend/package-lock.json
            plugin/package-lock.json

      # 安装前端依赖并构建
      - name: Build Frontend
        working-directory: ui/diffsense-frontend
        run: |
          echo "Building frontend in $(pwd)"
          echo "Frontend dist directory: $FRONTEND_DIST"
          echo "Frontend target directory: $FRONTEND_TARGET"
          echo "Vite output directory: $VITE_OUT_DIR"
          
          # 检查和创建目录
          mkdir -p dist
          chmod -R 755 .
          
          echo "Directory contents and permissions before build:"
          ls -la
          
          # 安装依赖和构建
          npm install
          npm run build
          
          echo "Directory contents and permissions after build:"
          ls -la
          ls -la dist/ || echo "dist/ directory not found"
          
          # 如果dist目录存在，显示其内容和权限
          if [ -d "dist" ]; then
            echo "dist directory exists, contents and permissions:"
            ls -la dist/
            
            # 确保dist目录有正确的权限
            chmod -R 755 dist/
          else
            echo "dist directory was not created!"
            exit 1
          fi
          
      # 安装插件依赖并构建
      - name: Build VSCode Extension
        working-directory: plugin
        run: |
          echo "Building plugin in $(pwd)"
          echo "Directory contents and permissions before build:"
          ls -la
          
          # 创建必要的目录
          mkdir -p ui/diffsense-frontend
          chmod -R 755 .
          
          npm install
          npm run build
          
          echo "Directory contents and permissions after build:"
          ls -la
          echo "UI directory contents and permissions:"
          ls -la ui/diffsense-frontend/ || echo "UI directory not found"
          
      # 使用与本地一致的 prepare-release 流程
      - name: Prepare Release Folder
        working-directory: plugin
        run: npm run prepare-release

      # 在 release 目录打包 VSIX
      - name: Package VSIX from Release
        working-directory: plugin/release
        run: |
          echo "Packaging VSIX in $(pwd)"
          npx vsce package --no-yarn

      # 获取版本号
      - name: Get Version
        id: get_version
        shell: bash
        run: |
          VERSION=$(node -p "require('${PLUGIN_DIR}/package.json').version")
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "Building version: ${VERSION}"
          
      # 创建GitHub Release
      - name: Create Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.VERSION }}
          release_name: Release v${{ env.VERSION }}
          draft: false
          prerelease: false
          
      # 上传VSIX到Release
      - name: Upload VSIX to Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.PLUGIN_DIR }}/release/diffsense-${{ env.VERSION }}.vsix
          asset_name: diffsense-${{ env.VERSION }}.vsix
          asset_content_type: application/octet-stream
          
      # 上传构建产物（用于调试和验证）
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4.6.2
        with:
          name: DiffSense-${{ env.VERSION }}-Full
          path: |
            ${{ env.PLUGIN_DIR }}/release/analyzers/
            ${{ env.PLUGIN_DIR }}/release/ui/
            ${{ env.PLUGIN_DIR }}/release/*.vsix
          retention-days: 14

      # 运行插件目录的工作流
      - name: Run Plugin Workflow
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        working-directory: plugin
        env:
          ARTIFACTS_TOKEN: ${{ secrets.ARTIFACTS_TOKEN }}
        run: |
          echo "Running plugin workflow in $(pwd)"
          
          # 确保工作目录正确
          if [ ! -f ".github/workflows/ci.yml" ]; then
            echo "Error: Plugin workflow file not found!"
            exit 1
          fi
          
          # 运行插件的构建和部署步骤
          npm ci
          npm run prepare-package
          npm run compile
          npm run package
          
          # 准备产物目录
          mkdir -p artifacts-staging
          cp -r dist analyzers ui *.vsix package.json tsconfig.json icon.png LICENSE.txt README.md .vscodeignore artifacts-staging/
          
          # 推送到 artifacts 仓库
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          if [ -z "$ARTIFACTS_TOKEN" ]; then
            echo "Error: ARTIFACTS_TOKEN is not set"
            exit 1
          fi
          
          # 克隆 artifacts 仓库
          git clone https://x-access-token:${ARTIFACTS_TOKEN}@github.com/GoldenSupremeSaltedFish/Diffsense-artifacts.git artifacts-repo
          
          # 清空并复制新的构建产物
          cd artifacts-repo
          rm -rf *
          cp -r ../artifacts-staging/* .
          
          # 提交并推送
          git add .
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Deploy plugin artifacts $(date +'%Y-%m-%d %H:%M:%S')"
            git push origin main
          fi
